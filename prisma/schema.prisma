generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  firstName       String
  lastName        String
  middleName      String?
  birthDate       DateTime
  tel             String?
  avatar          String?
  role            Role
  tokenVersion    Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  resume          Resume?
  favoriteResumes FavoriteResume[]
  favoriteOrders  FavoriteOrder[]
  postedOrders    Order[]
}

model FavoriteResume {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  resume    Resume   @relation(fields: [resumeId], references: [id])
  resumeId  String
  createdAt DateTime @default(now())
}

model Resume {
  id           String           @id @default(uuid())
  speciality   Speciality       @relation(fields: [specialityId], references: [id])
  specialityId String
  level        Level            @relation(fields: [levelId], references: [id])
  levelId      String
  details      String
  skills       ResumeSkill[]
  author       User             @relation(fields: [authorId], references: [id])
  authorId     String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  favoritedBy  FavoriteResume[]
}

model ResumeSkill {
  id       String @id @default(uuid())
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String
  skill    Skill  @relation(fields: [skillId], references: [id])
  skillId  String
}

model Skill {
  id               String        @id @default(uuid())
  value            String
  attachedByResume ResumeSkill[]
  attachedByOrder  OrderSkill[]
}

model Level {
  id         String   @id @default(uuid())
  value      String
  attackedBy Resume[]
}

model Speciality {
  id         String   @id @default(uuid())
  value      String
  attackedBy Resume[]
}

model Order {
  id          String          @id @default(uuid())
  title       String
  description String
  price       Int?
  secure      Boolean
  author      User            @relation(fields: [authorId], references: [id])
  authorId    String
  status      OrderStatus     @default(POSTED)
  skills      OrderSkill[]
  favoritedBy FavoriteOrder[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model FavoriteOrder {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model OrderSkill {
  id      String @id @default(uuid())
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
}

enum OrderStatus {
  COMPLETED
  POSTED
  ARCHIVED
}

enum Role {
  ADMIN
  MODER
  EMPLOYER
  PERFORMER
}
